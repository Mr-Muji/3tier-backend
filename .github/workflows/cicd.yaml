# name: 빌드 및 배포 # 워크플로우 이름 정의
# # 워크플로우 트리거 설정
# on:
#   push:
#     branches: [main] # main 또는 master 브랜치에 푸시될 때 실행
#   pull_request:
#     branches: [main] # main 또는 master 브랜치로 PR이 생성될 때 실행
#   workflow_dispatch: # GitHub UI에서 수동으로 워크플로우 실행 가능하도록 설정
# # 전역 환경 변수 설정
# env:
#   AWS_REGION: ap-northeast-2 # AWS 리전 설정 (서울 리전)
#   ECR_REPOSITORY: 3tier-ecr # ECR 저장소 이름 설정
#   EKS_CLUSTER_NAME: eks-cluster # EKS 클러스터 이름 설정
#   DEPLOYMENT_NAME: # TODO # 쿠버네티스 디플로이먼트 이름 설정
# # 작업(job) 정의 시작
# jobs:
#   # 테스트 작업 정의
#   test:
#     name: 테스트 # 작업 이름
#     runs-on: ubuntu-latest # 작업 실행 환경 (최신 우분투)
#     steps: # 테스트 작업의 단계 정의
#       - name: 코드 체크아웃 # 소스 코드 가져오기
#         uses: actions/checkout@v3 # GitHub 액션 - 코드 체크아웃
#       - name: Go 설정 # Go 환경 설정
#         uses: actions/setup-go@v4 # GitHub 액션 - Go 설치
#         with:
#           go-version: '1.16' # Go 버전 1.16 사용 (코드에 맞는 버전)
#       - name: Go 모듈 다운로드 # 의존성 모듈 다운로드
#         run: |
#           go get golang.org/x/lint/golint  # 코드 검사 도구 설치
#           go mod download  # go.mod에 정의된 모든 의존성 다운로드
#       - name: 테스트 실행 # 테스트 및 코드 검증 실행
#         run: make validate # Makefile의 validate 명령 실행 (코드 포맷팅, 정적 분석, 테스트)
#   # 빌드 및 ECR 푸시 작업 정의
#   build-and-push:
#     name: 빌드 및 ECR 푸시 # 작업 이름
#     needs: test # test 작업이 성공적으로 완료된 후에 실행
#     runs-on: ubuntu-latest # 작업 실행 환경 (최신 우분투)
#     steps: # 빌드 및 푸시 작업의 단계 정의
#       - name: 코드 체크아웃 # 소스 코드 가져오기
#         uses: actions/checkout@v3 # GitHub 액션 - 코드 체크아웃
#       - name: AWS 인증 설정 # AWS 접근 설정
#         uses: aws-actions/configure-aws-credentials@v2 # GitHub 액션 - AWS 자격 증명 구성
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS 액세스 키 ID (GitHub Secret에서 가져옴)
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS 시크릿 액세스 키 (GitHub Secret에서 가져옴)
#           aws-region: ${{ env.AWS_REGION }} # AWS 리전 (환경 변수에서 가져옴)
#       - name: ECR 로그인 # ECR 레지스트리 로그인
#         id: login-ecr # 이 단계의 출력을 참조하기 위한 ID
#         uses: aws-actions/amazon-ecr-login@v1 # GitHub 액션 - ECR 로그인
#       - name: 이미지 빌드 및 푸시 # Docker 이미지 빌드 및 ECR 푸시
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # ECR 레지스트리 URL (이전 단계 출력)
#           IMAGE_TAG: ${{ github.sha }} # 이미지 태그로 현재 커밋 SHA 사용
#         run: |
#           # 동일한 Dockerfile로 두 개의 이미지 태그 빌드
#           # 1. 특정 커밋 SHA로 태그된 이미지
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           # 2. latest 태그가 붙은 이미지
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

#           # 두 이미지 모두 ECR로 푸시
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

#           # 이미지 URI를 출력 변수로 저장 (다음 작업에서 사용하기 위함)
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#   # EKS 배포 작업 정의
#   deploy-to-eks:
#     name: EKS 배포 # 작업 이름
#     needs: build-and-push # build-and-push 작업이 성공적으로 완료된 후에 실행
#     runs-on: ubuntu-latest # 작업 실행 환경 (최신 우분투)
#     steps: # EKS 배포 작업의 단계 정의
#       - name: 코드 체크아웃 # 소스 코드 가져오기
#         uses: actions/checkout@v3 # GitHub 액션 - 코드 체크아웃
#       - name: AWS 인증 설정 # AWS 접근 설정
#         uses: aws-actions/configure-aws-credentials@v2 # GitHub 액션 - AWS 자격 증명 구성
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS 액세스 키 ID (GitHub Secret에서 가져옴)
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS 시크릿 액세스 키 (GitHub Secret에서 가져옴)
#           aws-region: ${{ env.AWS_REGION }} # AWS 리전 (환경 변수에서 가져옴)
#       - name: kubeconfig 설정 # EKS 클러스터에 접근하기 위한 kubeconfig 설정
#         run: |
#           # AWS CLI를 사용하여 EKS 클러스터의 kubeconfig 생성
#           aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
#       - name: kubectl 설치 # 쿠버네티스 CLI 도구 설치
#         uses: azure/setup-kubectl@v3 # GitHub 액션 - kubectl 설치
#       - name: EKS에 배포 # 애플리케이션을 EKS 클러스터에 배포
#         run: |
#           # ECR에서 최신 이미지 URI 가져오기
#           # AWS CLI 쿼리를 통해 저장소 URI를 가져온 후 현재 커밋 SHA를 태그로 추가
#           IMAGE_URI=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --query 'repositories[0].repositoryUri' --output text):${{ github.sha }}

#           # 기존 디플로이먼트의 이미지를 새 이미지로 업데이트
#           # --record 플래그: 배포 히스토리에 이 명령어를 기록하여 롤백 가능하게 함
#           kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} ${{ env.DEPLOYMENT_NAME }}=$IMAGE_URI --record

#           # 배포 상태 확인 및 완료될 때까지 대기
#           # 이 명령어는 디플로이먼트가 완전히 롤아웃될 때까지 기다림
#           kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
