# Go 기반 백엔드 애플리케이션을 위한 CI 파이프라인
# ECR에 도커 이미지를 빌드하고 업로드하며, ArgoCD를 통한 배포를 위해 매니페스트 저장소를 업데이트합니다.
name: "백엔드 CI"

# 워크플로우 트리거 설정 - 언제 이 CI 파이프라인이 실행될지 정의합니다.
on:
  push:
    branches:
      - main # 메인 브랜치에 코드가 푸시될 때 실행됩니다. (배포용)
  pull_request:
    branches:
      - main # 메인 브랜치로 PR이 생성되거나 업데이트될 때 실행됩니다. (테스트용)
  workflow_dispatch: # 수동으로 워크플로우를 실행할 수 있습니다.

# 환경 변수 정의 - 전체 워크플로우에서 사용되는 전역 변수들입니다.
env:
  # AWS 설정
  AWS_REGION: "ap-northeast-2" # 서울 리전 (한국)을 사용합니다.
  # ECR 설정
  ECR_REPOSITORY: "tier3-backend" # ECR 저장소 이름
  # 이미지 이름 관련 설정
  APP_NAME: "backend" # 애플리케이션 이름 - 이미지 이름에 사용됩니다.
  APP_VERSION: "1.0" # 애플리케이션 버전 - 이미지 이름에 사용됩니다.
  # Go 설정
  GO_VERSION: '1.16' # Go 버전 - 프로젝트 요구사항에 맞는 버전을 사용합니다.

# 작업 정의 - 실제로 실행될 작업들을 정의합니다.
jobs:
  # 빌드 및 ECR 업로드 작업
  build-and-push:
    name: "빌드 및 ECR 이미지 푸시"
    runs-on: ubuntu-latest # GitHub Actions에서 제공하는 최신 Ubuntu 환경에서 실행됩니다.
    
    # 작업 단계 - 순차적으로 실행될 단계들을 정의합니다.
    steps:
      # 1. 소스 코드 체크아웃 - GitHub 저장소에서 코드를 가져옵니다.
      - name: 코드 체크아웃
        uses: actions/checkout@v3
      
      # 2. 빌드 날짜 및 태그 이름 설정
      - name: 빌드 정보 설정
        id: build-info
        run: |
          # 버전 태그 (backend_v1.0 형식)
          VERSION_TAG="${APP_NAME}-v${APP_VERSION}"
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_OUTPUT
          
          # 타임스탬프 형식으로 YYYYMMDDHHmmss 포맷팅 (초까지 포함)
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_OUTPUT
          
          # 타임스탬프가 포함된 고유 태그 생성
          UNIQUE_TAG="${APP_NAME}-v${APP_VERSION}_${TIMESTAMP}"
          echo "UNIQUE_TAG=${UNIQUE_TAG}" >> $GITHUB_OUTPUT

          # 빌드 정보 출력
          echo "애플리케이션 이름: ${APP_NAME}"
          echo "애플리케이션 버전: v${APP_VERSION}"
          echo "버전 태그: ${VERSION_TAG}"
          echo "타임스탬프: ${TIMESTAMP}"
          echo "고유 이미지 태그: ${UNIQUE_TAG}"
      
      # 3. Go 환경 설정 - Go 코드 빌드 및 테스트를 위한 환경을 설정합니다.
      - name: Go 환경 설정
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      # 4. Go 의존성 다운로드
      - name: Go 모듈 다운로드
        run: |
          go get golang.org/x/lint/golint
          go mod download
      
      # 5. 코드 검증 및 테스트 실행
      - name: 코드 검증 및 테스트
        run: make validate
      
      # 6. AWS 자격 증명 설정 - AWS 서비스를 사용하기 위한 인증 설정
      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # 7. ECR 로그인 - AWS ECR 서비스에 로그인합니다.
      - name: ECR 로그인
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      
      # 8. ECR 저장소 존재 확인 및 생성
      - name: ECR 저장소 확인/생성
        run: |
          if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} >/dev/null 2>&1; then
            echo "ECR 저장소가 존재하지 않습니다. 새로 생성합니다."
            aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --image-scanning-configuration scanOnPush=true
          else
            echo "ECR 저장소가 이미 존재합니다."
          fi
      
      # 9. Docker 메타데이터 설정 - Docker 이미지 메타데이터를 설정합니다.
      - name: Docker 메타데이터 설정
        id: docker-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=raw,value=${{ steps.build-info.outputs.UNIQUE_TAG }}  # 초까지 포함된 고유 태그
            type=raw,value=${{ steps.build-info.outputs.VERSION_TAG }} # 버전만 포함된 태그
            type=raw,value=latest                                     # 항상 최신 이미지를 가리키는 'latest' 태그
      
      # 10. Docker 빌더 설정 - 효율적인 Docker 이미지 빌드를 위한 설정
      - name: Docker 빌더 설정
        uses: docker/setup-buildx-action@v2
      
      # 11. Docker 이미지 빌드 및 ECR 푸시
      - name: 도커 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            APP_NAME=${{ env.APP_NAME }}
            APP_VERSION=${{ env.APP_VERSION }}
            BUILD_DATE=${{ steps.build-info.outputs.TIMESTAMP }}
      
      # 12. 이미지 정보 출력
      - name: 이미지 정보 출력
        run: |
          echo "===== 빌드된 이미지 정보 ====="
          echo "이미지 이름: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
          echo "이미지 태그: ${{ steps.build-info.outputs.UNIQUE_TAG }}"
          echo "이미지 URI: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.build-info.outputs.UNIQUE_TAG }}"

          # 이미지 취약점 스캔 결과를 확인합니다. (보안 확인)
          echo "===== 이미지 취약점 스캔 ====="
          aws ecr describe-image-scan-findings --repository-name ${{ env.ECR_REPOSITORY }} --image-id imageTag=${{ steps.build-info.outputs.UNIQUE_TAG }} || echo "스캔이 아직 완료되지 않았습니다."
      
      # 13. 매니페스트 저장소 업데이트 - ArgoCD를 통한 배포를 위해 매니페스트 저장소를 업데이트합니다.
      - name: 매니페스트 저장소 업데이트
        env:
          UNIQUE_TAG: ${{ steps.build-info.outputs.UNIQUE_TAG }}
          MANIFEST_REPO: "Mr-Muji/3tier-manifest"
          MANIFEST_TOKEN: ${{ secrets.MANIFEST_TOKEN }}
        run: |
          # Git 사용자 설정
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 매니페스트 저장소 클론
          git clone https://x-access-token:${MANIFEST_TOKEN}@github.com/${MANIFEST_REPO}.git
          cd 3tier-manifest
          
          # 이미지 태그 업데이트
          sed -i "s|tag: .*|tag: ${UNIQUE_TAG}|g" charts/backend/values.yaml
          
          # ECR 저장소 URI 업데이트
          ECR_URI="${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
          sed -i "s|repository: .*|repository: ${ECR_URI}|g" charts/backend/values.yaml
          
          # 변경사항 확인
          git status
          
          # 변경사항이 있는 경우에만 커밋 및 푸시
          if [[ -n $(git status -s) ]]; then
            git add charts/backend/values.yaml
            git commit -m "Update backend image to ${UNIQUE_TAG}"
            git push
            echo "매니페스트 저장소 업데이트 완료: 이미지 태그가 ${UNIQUE_TAG}로 변경되었습니다."
          else
            echo "변경사항이 없습니다. 매니페스트 저장소 업데이트를 건너뜁니다."
          fi
